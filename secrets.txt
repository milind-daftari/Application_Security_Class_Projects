The following files had exposed secrets:

1. GiftcardSite\GiftcardSite\settings.py
Here, "SECRET_KEY" contained the secret in plain text and in Databases, Database Name (Name) and Username (User) were in plain text.
To secure them, the following changes were made:
SECRET_KEY = os.environ.get('SECRET_KEY')
'NAME': os.environ.get('MYSQL_DB')
'USER': os.environ.get('MYSQL_USERNAME')

2. GiftcardSite\k8\django-deploy.yaml
Here, MYSQL_ROOT_PASSWORD and MYSQL_DB were in plain text.
To secure them, the following changes were made:
- name: MYSQL_ROOT_PASSWORD
    valueFrom:
        secretKeyRef:
            name: assignment3-django-secrets
            key: MYSQL_ROOT_PASSWORD

- name: MYSQL_DB
    valueFrom:
        secretKeyRef:
            name: assignment3-django-secrets
            key: MYSQL_DB

3. db\k8\db-deployment.yaml
Here, MYSQL_ROOT_PASSWORD and MYSQL_DATABASE were in plain text.
To secure them, the following changes were made:
- name: MYSQL_ROOT_PASSWORD
    valueFrom:
        secretKeyRef:
            name: assignment3-django-secrets
            key: MYSQL_ROOT_PASSWORD

- name: MYSQL_DATABASE
    valueFrom:
        secretKeyRef:
            name: assignment3-django-secrets
            key: MYSQL_DB

To make the above changes work, a two step process was used. 
First, a "django-secrets.yaml" file was created in GiftcardSite\k8\, having the final path as "GiftcardSite\k8\django-secrets.yaml". The following code was added in it:
kind: Secret
apiVersion: v1
metadata:
  name: assignment3-django-secrets
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: dGhpc2lzYXRlc3R0aGluZy4=
  MYSQL_DB: R2lmdGNhcmRTaXRlREI=
  SECRET_KEY: a21neXNhI2Z6KzkoejEqPWMweWRyaml6ayo3c3RobTJnYTF6ND1eNjEkY3hjcThiJGw=
  MYSQL_USERNAME: cm9vdA==

Here, the "kind: Secret" says that this is a Secret resource. The metadata field contains the source's name. The "type: Opaque" indicates that the Secret contains generic sensitive data.
The "data" field contains the actual sensitive data, where each key-value pair represents a single piece of data and values are Base64 encoded.

Second, the following was added to "GiftcardSite\k8\django-deploy.yaml":
- name: MYSQL_USERNAME
    valueFrom:
        secretKeyRef:
            name: assignment3-django-secrets
            key: MYSQL_USERNAME
              
- name: SECRET_KEY
    valueFrom:
        secretKeyRef:
            name: assignment3-django-secrets
            key: SECRET_KEY

The commands used to rebuild were:

minikube delete (delete the existing minikube)

minikube start (create a new minikube and start it)

minikube -p minikube docker-env (Configure Docker client to communicate with Docker daemon running inside the minikube cluster)
& minikube -p minikube docker-env --shell powershell | Invoke-Expression

(Build the Dockerfiles Kubernetes will use to create the cluster)
docker build -t nyuappsec/assign3:v0 .
docker build -t nyuappsec/assign3-proxy:v0 proxy/
docker build -t nyuappsec/assign3-db:v0 db/

(Create pods and services needed for our project)
kubectl apply -f db/k8
kubectl apply -f GiftcardSite/k8
kubectl apply -f proxy/k8

(Verify that the pods and services were created successfully)
kubectl get pods
kubectl get service

(Open the proxy-service in the default browser)
minikube service proxy-service

(When the work is complete, stop minikube)
minikube stop

